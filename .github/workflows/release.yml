name: "release"

on:
  push:
    tags:
      - "v*"
  workflow_dispatch:

jobs:
  create-release:
    permissions:
      contents: write
    runs-on: ubuntu-latest
    outputs:
      release_id: ${{ steps.create-release.outputs.result }}
      release_version: ${{ steps.get-version.outputs.package_version }}

    steps:
      - uses: actions/checkout@v4

      - name: setup node
        uses: actions/setup-node@v4
        with:
          node-version: lts/*

      - name: get version
        id: get-version
        run: |
          echo "PACKAGE_VERSION=$(node -p "require('./package.json').version")" >> $GITHUB_ENV
          echo "package_version=$(node -p "require('./package.json').version")" >> $GITHUB_OUTPUT

      - name: create release
        id: create-release
        uses: actions/github-script@v6
        with:
          script: |
            const { data } = await github.rest.repos.createRelease({
              owner: context.repo.owner,
              repo: context.repo.repo,
              tag_name: `v${process.env.PACKAGE_VERSION}`,
              name: `OpenChat v${process.env.PACKAGE_VERSION}`,
              body: 'Take a look at the assets to download and install this app.',
              draft: true,
              prerelease: false
            })
            return data.id

  build-tauri:
    needs: create-release
    permissions:
      contents: write
    strategy:
      fail-fast: false
      matrix:
        include:
          - platform: "macos-latest" # for Arm based macs (M1 and above).
            args: "--target aarch64-apple-darwin"
          - platform: "macos-latest" # for Intel based macs.
            args: "--target x86_64-apple-darwin"
          # - platform: "ubuntu-22.04" # for Tauri v1 you could replace this with ubuntu-20.04.
          #   args: ""
          # - platform: "windows-latest"
          #   args: ""

    runs-on: ${{ matrix.platform }}
    steps:
      - uses: actions/checkout@v4

      - name: Install pnpm
        uses: pnpm/action-setup@v2
        with:
          version: 9
          run_install: false

      - name: Sync node version and setup cache
        uses: actions/setup-node@v3
        with:
          node-version: "20.10.0"
          cache: "pnpm"

      - name: install Rust stable
        uses: dtolnay/rust-toolchain@stable
        with:
          # Those targets are only used on macos runners so it's in an `if` to slightly speed up windows and linux builds.
          targets: ${{ matrix.platform == 'macos-latest' && 'aarch64-apple-darwin,x86_64-apple-darwin' || '' }}

      - name: Rust cache
        uses: Swatinem/rust-cache@v2
        with:
          workspaces: "./src-tauri -> target"
          key: ${{ matrix.target }}

      - name: fix prisma (macos)
        if: matrix.platform == 'macos-latest'
        run: |
          sed -i '' -E "s|\"(.*)schema.prisma\"|\"/Users/runner/work/openchat/openchat/src-tauri/prisma/schema.prisma\"|g" src-tauri/src/db/prisma_client.rs
          sed -i '' -E "s|\"(.*)/prisma/migrations\"|\"/Users/runner/work/openchat/openchat/src-tauri/prisma/migrations\"|g" src-tauri/src/db/prisma_client.rs

      - name: install dependencies (ubuntu only)
        if: matrix.platform == 'ubuntu-22.04' # This must match the platform value defined above.
        run: |
          sudo apt-get update
          sudo apt-get install -y libwebkit2gtk-4.0-dev libwebkit2gtk-4.1-dev libappindicator3-dev librsvg2-dev patchelf
        # webkitgtk 4.0 is for Tauri v1 - webkitgtk 4.1 is for Tauri v2.
        # You can remove the one that doesn't apply to your app to speed up the workflow a bit.

      - name: Install frontend dependencies
        run: pnpm install --frozen-lockfile

      - uses: tauri-apps/tauri-action@v0
        id: tauri-action
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          TAURI_PRIVATE_KEY: ${{ secrets.TAURI_PRIVATE_KEY }}
          TAURI_KEY_PASSWORD: ""
        with:
          releaseId: ${{ needs.create-release.outputs.release_id }}
          args: ${{ matrix.args }}

      - name: Upload Aliyun OSS
        uses: terasum/oss-action@master
        with:
          key-id: ${{ secrets.OSS_KEY_ID }}
          key-secret: ${{ secrets.OSS_KEY_SECRET }}
          region: oss-cn-hangzhou
          bucket: openchat-oss
          assets: |
            ${{ steps.tauri-action.outputs.artifactPaths }}@/openchat-oss/release-v${{ needs.create-release.outputs.release_version }}/

      - name: Post Handle Copy Aliyun OSS (aarch64-apple-darwin)
        if: matrix.args == '--target aarch64-apple-darwin'
        run: |
          cp src-tauri/target/aarch64-apple-darwin/release/bundle/macos/OpenChat.app.tar.gz src-tauri/target/aarch64-apple-darwin/release/bundle/macos/OpenChat_aarch64.app.tar.gz

      - name: Post Handle Copy Aliyun OSS (x86_64-apple-darwin)
        if: matrix.args == '--target x86_64-apple-darwin'
        run: |
          cp src-tauri/target/x86_64-apple-darwin/release/bundle/macos/OpenChat.app.tar.gz src-tauri/target/x86_64-apple-darwin/release/bundle/macos/OpenChat_x64.app.tar.gz

      - name: Upload Aliyun OSS (aarch64-apple-darwin)
        if: matrix.args == '--target aarch64-apple-darwin'
        uses: terasum/oss-action@master
        with:
          key-id: ${{ secrets.OSS_KEY_ID }}
          key-secret: ${{ secrets.OSS_KEY_SECRET }}
          region: oss-cn-hangzhou
          bucket: openchat-oss
          assets: |
            src-tauri/target/aarch64-apple-darwin/release/bundle/macos/OpenChat_aarch64.app.tar.gz@/openchat-oss/release-v${{ needs.create-release.outputs.release_version }}/

      - name: Upload Aliyun OSS (x86_64-apple-darwin)
        if: matrix.args == '--target x86_64-apple-darwin'
        uses: terasum/oss-action@master
        with:
          key-id: ${{ secrets.OSS_KEY_ID }}
          key-secret: ${{ secrets.OSS_KEY_SECRET }}
          region: oss-cn-hangzhou
          bucket: openchat-oss
          assets: |
            src-tauri/target/x86_64-apple-darwin/release/bundle/macos/OpenChat_x64.app.tar.gz@/openchat-oss/release-v${{ needs.create-release.outputs.release_version }}/

    outputs:
      releaseUploadUrl: ${{ steps.tauri-action.outputs.releaseUploadUrl }}
      artifactPaths: ${{ steps.tauri-action.outputs.artifactPaths }}
      appVersion: ${{ steps.tauri-action.outputs.appVersion }}
      releaseHtmlUrl: ${{ steps.tauri-action.outputs.releaseHtmlUrl }}
      releaseId: ${{ steps.tauri-action.outputs.releaseId }}

  publish-release:
    permissions:
      contents: write
    runs-on: ubuntu-latest
    needs: [create-release, build-tauri]

    steps:
      - name: publish release
        id: publish-release
        uses: actions/github-script@v6
        env:
          release_id: ${{ needs.create-release.outputs.release_id }}
        with:
          script: |
            github.rest.repos.updateRelease({
              owner: context.repo.owner,
              repo: context.repo.repo,
              release_id: process.env.release_id,
              draft: false,
              prerelease: false
            })
